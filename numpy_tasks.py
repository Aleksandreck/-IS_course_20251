import numpy as np

def uniform_intervals(a, b, n):
    """1. —Å–æ–∑–¥–∞–µ—Ç numpy –º–∞—Å—Å–∏–≤ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç a –¥–æ b –Ω–∞ n –æ—Ç—Ä–µ–∑–∫–æ–≤."""
    return np.linspace(a, b, n+1)

def cyclic123_array(n): 
    """2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç numpy –º–∞—Å—Å–∏–≤ –¥–ª–∏–Ω—ã 3ùëõ, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ —á–∏—Å–ª–∞–º–∏ 1, 2, 3, 1, 2, 3, 1...."""
    return np.tile([1, 2, 3], n)

def first_n_odd_number(n):
    """3. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–µ—Ä–≤—ã—Ö n –Ω–µ—á–µ—Ç–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª"""
    return np.arange(1, 2*n, 2)

def zeros_array_with_border(n):
    """4. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω—É–ª–µ–π —Ä–∞–∑–º–µ—Ä–∞ n x n —Å "—Ä–∞–º–∫–æ–π" –∏–∑ –µ–¥–∏–Ω–∏—Ü –ø–æ –∫—Ä–∞—è–º."""
    arr = np.zeros((n, n))
    arr[0, :] = 1  # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    arr[-1, :] = 1  # –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞
    arr[:, 0] = 1  # –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
    arr[:, -1] = 1  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü
    return arr

def chess_board(n):
    """5. –°–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ n x n —Å —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–æ–π –∏–∑ –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü"""
    board = np.zeros((n, n), dtype=int)
    board[1::2, ::2] = 1
    board[::2, 1::2] = 1
    return board

def matrix_with_sum_index(n):
    """6. –°–æ–∑–¥–∞—ë—Ç ùëõ √ó ùëõ –º–∞—Ç—Ä–∏—Ü—É —Å (ùëñ,ùëó)-—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–≤–Ω—ã–º ùëñ+ùëó."""
    i = np.arange(n).reshape(n, 1)
    j = np.arange(n)
    return i + j

def cos_sin_as_two_rows(a, b, dx):
    """7. –í—ã—á–∏—Å–ª–∏—Ç–µ $cos(x)$ –∏ $sin(x)$ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [a, b) —Å —à–∞–≥–æ–º dx, 
    –∞ –∑–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤."""
    x = np.arange(a, b, dx)
    cos_values = np.cos(x)
    sin_values = np.sin(x)
    return np.vstack((cos_values, sin_values))

def compute_mean_rowssum_columnssum(A):
    """8. –î–ª—è numpy –º–∞—Å—Å–∏–≤–∞ A –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å—É–º–º—É —Å—Ç—Ä–æ–∫ –∏ —Å—É–º–º—É —Å—Ç–æ–ª–±—Ü–æ–≤."""
    mean = np.mean(A)
    row_sums = np.sum(A, axis=1)
    col_sums = np.sum(A, axis=0)
    return mean, row_sums, col_sums

def sort_array_by_column(A, j):
    """9. –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ numpy –º–∞—Å—Å–∏–≤–∞ A –ø–æ j-–º—É —Å—Ç–æ–ª–±—Ü—É –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è."""
    return A[A[:, j].argsort()]

def compute_integral(a, b, f, dx, method):
    """10. –°—á–∏—Ç–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏ f –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ [a, b] —Å —à–∞–≥–æ–º dx 3-–º—è –º–µ—Ç–æ–¥–∞–º–∏:  
    method == 'rectangular' - –º–µ—Ç–æ–¥–æ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞   
    method == 'trapezoidal' - –º–µ—Ç–æ–¥–æ–º —Ç—Ä–∞–ø–µ—Ü–∏–π   
    method == 'simpson' - –º–µ—Ç–æ–¥–æ–º –°–∏–º–ø—Å–æ–Ω–∞  
    """
    x = np.arange(a, b + dx, dx)
    y = f(x)
    
    if method == 'rectangular':
        # –ú–µ—Ç–æ–¥ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ (–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏)
        return np.sum(y[:-1] * dx)
    elif method == 'trapezoidal':
        # –ú–µ—Ç–æ–¥ —Ç—Ä–∞–ø–µ—Ü–∏–π
        return np.sum((y[:-1] + y[1:]) * dx / 2)
    elif method == 'simpson':
        # –ú–µ—Ç–æ–¥ –°–∏–º–ø—Å–æ–Ω–∞
        n = len(x) - 1
        if n % 2 == 1:
            # –î–ª—è –Ω–µ—á–µ—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            return (dx/3) * (np.sum(y[:-2:2] + 4*y[1:-1:2] + y[2:-1:2])) + (dx/2)*(y[-2] + y[-1])
        else:
            # –î–ª—è —á–µ—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            return (dx/3) * np.sum(y[:-1:2] + 4*y[1::2] + y[2::2])
    else:
        raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
